diff --git a/docs/casts/demo.tape b/docs/casts/demo.tape
index a98b109..246a14e 100644
--- a/docs/casts/demo.tape
+++ b/docs/casts/demo.tape
@@ -7,15 +7,12 @@ Set Width 1200
 Set Height 600
 
 # Type a command in the terminal.
-Type "ai"
+Type "git diff | ai 'summarise in 10 lines max'"
 Enter
 
 # Pause for dramatic effect...
 Sleep 1000ms
 
-# Run the command by pressing enter.
-Type "what is the command to show the diff of the most recent commit?"
-Enter
 
 # Admire the output for a bit.
-Sleep 2s
+Sleep 15s
diff --git a/src/chat-pipeline/stages/build-context.ts b/src/chat-pipeline/stages/build-context.ts
index 2caa269..7d6adb3 100644
--- a/src/chat-pipeline/stages/build-context.ts
+++ b/src/chat-pipeline/stages/build-context.ts
@@ -1,15 +1,43 @@
+import dbg from "debug";
 import { expandContext, ExpandedContext } from "../../context/context";
 import { ChatPipelineParameters } from "../ChatPipelineParameters";
 
+const debug = dbg("ai:context");
+
 export async function buildContext(
   params: ChatPipelineParameters,
   env: NodeJS.ProcessEnv,
 ): Promise<ExpandedContext[]> {
-  //  If context prompts have been disabled, we have no prompts to create.
-  if (!params.options.enableContextPrompts) {
-    return [];
-  }
+  //  Expand each context prompt, as long as expansion is enabled.
+  const contextPrompts = params.options.enableContextPrompts
+    ? params.config.prompts.chat.context.map((c) => expandContext(c, env))
+    : [];
+
+  //  Create our stdin template. Once stdin is stable we'll extract this
+  //  into a more sensible location.
+  const stdinTemplate = `Refer to 'stdin' when answering.
+'stdin' is the content that has been piped to this
+CLI tool. It is everything that is between the lines
+<file name="stdin"> and </file>. We can treat this as
+a file named 'stdin'.
+<file name="stdin">
+${params.executionContext.stdinContent}
+</file>
+`;
 
-  //  Expand each context prompt.
-  return params.config.prompts.chat.context.map((c) => expandContext(c, env));
+  //  Expand the stdin content.
+  const stdinPrompts: ExpandedContext[] =
+    params.executionContext.stdinContent !== undefined
+      ? [
+          {
+            role: "user",
+            name: "stdin",
+            template: stdinTemplate,
+            context: stdinTemplate,
+          },
+        ]
+      : [];
+  const context = [...contextPrompts, ...stdinPrompts];
+  debug(`expanded context: ${context.map((c) => c.context).join("\n")}`);
+  return context;
 }
diff --git a/src/cli.ts b/src/cli.ts
index 7bcdda7..8a4c54b 100755
--- a/src/cli.ts
+++ b/src/cli.ts
@@ -27,6 +27,7 @@ import { check } from "./commands/check";
 import { init } from "./actions/init";
 import { Actions } from "./actions/actions";
 import { usage } from "./commands/usage";
+import { readStdin } from "./lib/read-stdin";
 const cli = async (
   program: Command,
   executionContext: ExecutionContext,
@@ -129,18 +130,27 @@ const cli = async (
     .argument("<command>", 'debug command to use, e.g. "test-detach"')
     .argument("[parameters...]", 'parameters for the command, e.g. "one two"')
     .action(async (command, parameters) => {
-      const result = await debugCommand(command, parameters);
+      const result = await debugCommand(
+        executionContext,
+        config,
+        command,
+        parameters,
+      );
       console.log(JSON.stringify(result));
     });
 };
 
 async function main() {
+  //  If we have anything piped to stdin, read it.
+  const stdinContent = await readStdin(process.stdin);
+
   //  Create an initial execution context. This may evolve as we run various commands etc.
   //  Make a guess at the interactive mode based on whether the output is a TTY.
   const executionContext: ExecutionContext = {
     firstTime: fs.existsSync(configFilePath),
     isTTYstdin: process.stdin.isTTY || false,
     isTTYstdout: process.stdout.isTTY || false,
+    stdinContent,
   };
 
   //  Before we execute the command, we'll make sure we don't show a warning
@@ -164,6 +174,7 @@ async function main() {
     const initialConfig = await getConfiguration();
     if (initialConfig.debug.enable) {
       dbg.enable(initialConfig.debug.namespace || "");
+      dbg.log(`initialisiing and hydrating config...`);
     }
 
     //  Now hydrate and reload our config.
diff --git a/src/context/context.ts b/src/context/context.ts
index bc1544f..99cd04d 100644
--- a/src/context/context.ts
+++ b/src/context/context.ts
@@ -1,9 +1,6 @@
-import dbg from "debug";
 import expandEnvVars from "../lib/expand-env-vars";
 import { OpenAIChatRoles } from "../lib/openai/openai-roles";
 
-const debug = dbg("ai:context");
-
 export type ExpandedContext = {
   role: OpenAIChatRoles;
   name: string;
@@ -18,7 +15,6 @@ export function expandContext(
   env: NodeJS.ProcessEnv,
 ): ExpandedContext {
   const context = expandEnvVars(contextTemplate, env);
-  debug(`expanded context: ${context}`);
   return {
     role: "user",
     name: "<Unnamed Context>",
diff --git a/src/lib/execution-context.ts b/src/lib/execution-context.ts
index 67cff2f..f95d0e1 100644
--- a/src/lib/execution-context.ts
+++ b/src/lib/execution-context.ts
@@ -5,4 +5,7 @@ export type ExecutionContext = {
   //  More explicity, do we believe we have a TTY?
   isTTYstdin: boolean;
   isTTYstdout: boolean;
+
+  //  If we have piped input to stdin, it'll be here.
+  stdinContent: string | undefined;
 };
diff --git a/src/lib/openai/openai-models.ts b/src/lib/openai/openai-models.ts
index e68e0ed..9bbc700 100644
--- a/src/lib/openai/openai-models.ts
+++ b/src/lib/openai/openai-models.ts
@@ -41,6 +41,8 @@ export const OpenAIChatModels = [
   "gpt-3.5-turbo-1106",
   "gpt-3.5-turbo-0125",
   "gpt-3.5-turbo-16k-0613",
+  "gpt-4.5-preview",
+  "gpt-4.5-preview-2025-02-27",
 ];
 
 export function toChatModel(model: string): ChatModel | undefined {
